/*
 * LiftKit is a lightweight framework for clean, minimalist designs.
 * Copyright (c) 2024 Niklas Simandi
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
@use "sass:map";

$LIGHT: (
  "primary": rgb(52, 105, 63),
  "on-primary": rgb(255, 255, 255),
  "primary-container": rgb(182, 241, 187),
  "on-primary-container": rgb(0, 33, 10),
  "secondary": rgb(81, 99, 81),
  "on-secondary": rgb(255, 255, 255),
  "secondary-container": rgb(211, 232, 209),
  "on-secondary-container": rgb(15, 31, 17),
  "tertiary": rgb(57, 101, 109),
  "on-tertiary": rgb(255, 255, 255),
  "tertiary-container": rgb(189, 234, 244),
  "on-tertiary-container": rgb(0, 31, 36),
  "error": rgb(186, 26, 26),
  "on-error": rgb(255, 255, 255),
  "error-container": rgb(255, 218, 214),
  "on-error-container": rgb(65, 0, 2),
  "background": rgb(247, 251, 242),
  "on-background": rgb(24, 29, 24),
  "surface": rgb(247, 251, 242),
  "on-surface": rgb(24, 29, 24),
  "surface-variant": rgb(221, 229, 218),
  "on-surface-variant": rgb(65, 73, 65),
  "outline": rgb(114, 121, 112),
  "outline-variant": rgb(193, 201, 190),
  "shadow": rgb(0, 0, 0),
  "scrim": rgb(0, 0, 0),
  "inverse-surface": rgb(45, 50, 44),
  "inverse-on-surface": rgb(238, 242, 234),
  "inverse-primary": rgb(155, 212, 160),
  "primary-fixed": rgb(182, 241, 187),
  "on-primary-fixed": rgb(0, 33, 10),
  "primary-fixed-dim": rgb(155, 212, 160),
  "on-primary-fixed-variant": rgb(27, 81, 41),
  "secondary-fixed": rgb(211, 232, 209),
  "on-secondary-fixed": rgb(15, 31, 17),
  "secondary-fixed-dim": rgb(184, 204, 182),
  "on-secondary-fixed-variant": rgb(57, 75, 58),
  "tertiary-fixed": rgb(189, 234, 244),
  "on-tertiary-fixed": rgb(0, 31, 36),
  "tertiary-fixed-dim": rgb(161, 206, 215),
  "on-tertiary-fixed-variant": rgb(31, 77, 85),
  "surface-dim": rgb(215, 219, 211),
  "surface-bright": rgb(247, 251, 242),
  "surface-container-lowest": rgb(255, 255, 255),
  "surface-container-low": rgb(241, 245, 236),
  "surface-container": rgb(235, 239, 231),
  "surface-container-high": rgb(229, 233, 225),
  "surface-container-highest": rgb(224, 228, 220),
);
$DARK: (
  "primary": rgb(155, 212, 160),
  "on-primary": rgb(0, 57, 21),
  "primary-container": rgb(27, 81, 41),
  "on-primary-container": rgb(182, 241, 187),
  "secondary": rgb(184, 204, 182),
  "on-secondary": rgb(35, 52, 37),
  "secondary-container": rgb(57, 75, 58),
  "on-secondary-container": rgb(211, 232, 209),
  "tertiary": rgb(161, 206, 215),
  "on-tertiary": rgb(0, 54, 62),
  "tertiary-container": rgb(31, 77, 85),
  "on-tertiary-container": rgb(189, 234, 244),
  "error": rgb(255, 180, 171),
  "on-error": rgb(105, 0, 5),
  "error-container": rgb(147, 0, 10),
  "on-error-container": rgb(255, 218, 214),
  "background": rgb(16, 21, 16),
  "on-background": rgb(224, 228, 220),
  "surface": rgb(16, 21, 16),
  "on-surface": rgb(224, 228, 220),
  "surface-variant": rgb(65, 73, 65),
  "on-surface-variant": rgb(193, 201, 190),
  "outline": rgb(139, 147, 137),
  "outline-variant": rgb(65, 73, 65),
  "shadow": rgb(0, 0, 0),
  "scrim": rgb(0, 0, 0),
  "inverse-surface": rgb(224, 228, 220),
  "inverse-on-surface": rgb(45, 50, 44),
  "inverse-primary": rgb(52, 105, 63),
  "primary-fixed": rgb(182, 241, 187),
  "on-primary-fixed": rgb(0, 33, 10),
  "primary-fixed-dim": rgb(155, 212, 160),
  "on-primary-fixed-variant": rgb(27, 81, 41),
  "secondary-fixed": rgb(211, 232, 209),
  "on-secondary-fixed": rgb(15, 31, 17),
  "secondary-fixed-dim": rgb(184, 204, 182),
  "on-secondary-fixed-variant": rgb(57, 75, 58),
  "tertiary-fixed": rgb(189, 234, 244),
  "on-tertiary-fixed": rgb(0, 31, 36),
  "tertiary-fixed-dim": rgb(161, 206, 215),
  "on-tertiary-fixed-variant": rgb(31, 77, 85),
  "surface-dim": rgb(16, 21, 16),
  "surface-bright": rgb(54, 58, 53),
  "surface-container-lowest": rgb(11, 15, 11),
  "surface-container-low": rgb(24, 29, 24),
  "surface-container": rgb(28, 33, 28),
  "surface-container-high": rgb(38, 43, 38),
  "surface-container-highest": rgb(49, 54, 48),
);

@mixin set_theme($theme) {
  --primary: #{map.get($theme, "primary")};
  --on-primary: #{map.get($theme, "on-primary")};
  --primary-container: #{map.get($theme, "primary-container")};
  --on-primary-container: #{map.get($theme, "on-primary-container")};
  --secondary: #{map.get($theme, "secondary")};
  --on-secondary: #{map.get($theme, "on-secondary")};
  --secondary-container: #{map.get($theme, "secondary-container")};
  --on-secondary-container: #{map.get($theme, "on-secondary-container")};
  --tertiary: #{map.get($theme, "tertiary")};
  --on-tertiary: #{map.get($theme, "on-tertiary")};
  --tertiary-container: #{map.get($theme, "tertiary-container")};
  --on-tertiary-container: #{map.get($theme, "on-tertiary-container")};
  --error: #{map.get($theme, "error")};
  --on-error: #{map.get($theme, "on-error")};
  --error-container: #{map.get($theme, "error-container")};
  --on-error-container: #{map.get($theme, "on-error-container")};
  --background: #{map.get($theme, "background")};
  --on-background: #{map.get($theme, "on-background")};
  --surface: #{map.get($theme, "surface")};
  --on-surface: #{map.get($theme, "on-surface")};
  --surface-variant: #{map.get($theme, "surface-variant")};
  --on-surface-variant: #{map.get($theme, "on-surface-variant")};
  --outline: #{map.get($theme, "outline")};
  --outline-variant: #{map.get($theme, "outline-variant")};
  --shadow: #{map.get($theme, "shadow")};
  --scrim: #{map.get($theme, "scrim")};
  --inverse-surface: #{map.get($theme, "inverse-surface")};
  --inverse-on-surface: #{map.get($theme, "inverse-on-surface")};
  --inverse-primary: #{map.get($theme, "inverse-primary")};
  --primary-fixed: #{map.get($theme, "primary-fixed")};
  --on-primary-fixed: #{map.get($theme, "on-primary-fixed")};
  --primary-fixed-dim: #{map.get($theme, "primary-fixed-dim")};
  --on-primary-fixed-variant: #{map.get($theme, "on-primary-fixed-variant")};
  --secondary-fixed: #{map.get($theme, "secondary-fixed")};
  --on-secondary-fixed: #{map.get($theme, "on-secondary-fixed")};
  --secondary-fixed-dim: #{map.get($theme, "secondary-fixed-dim")};
  --on-secondary-fixed-variant: #{map.get($theme, "on-secondary-fixed-variant")};
  --tertiary-fixed: #{map.get($theme, "tertiary-fixed")};
  --on-tertiary-fixed: #{map.get($theme, "on-tertiary-fixed")};
  --tertiary-fixed-dim: #{map.get($theme, "tertiary-fixed-dim")};
  --on-tertiary-fixed-variant: #{map.get($theme, "on-tertiary-fixed-variant")};
  --surface-dim: #{map.get($theme, "surface-dim")};
  --surface-bright: #{map.get($theme, "surface-bright")};
  --surface-container-lowest: #{map.get($theme, "surface-container-lowest")};
  --surface-container-low: #{map.get($theme, "surface-container-low")};
  --surface-container: #{map.get($theme, "surface-container")};
  --surface-container-high: #{map.get($theme, "surface-container-high")};
  --surface-container-highest: #{map.get($theme, "surface-container-highest")};
}

:root {
  @include set_theme($LIGHT);
}

@media (prefers-color-scheme: dark) {

  :root {
    @include set_theme($DARK);
  }
}

@mixin fg__primary {
  color: var(--primary);
}

@mixin fg__on-primary {
  color: var(--on-primary);
}

@mixin fg__primary-container {
  color: var(--primary-container);
}

@mixin fg__on-primary-container {
  color: var(--on-primary-container);
}

@mixin fg__secondary {
  color: var(--secondary);
}

@mixin fg__on-secondary {
  color: var(--on-secondary);
}

@mixin fg__secondary-container {
  color: var(--secondary-container);
}

@mixin fg__on-secondary-container {
  color: var(--on-secondary-container);
}

@mixin fg__tertiary {
  color: var(--tertiary);
}

@mixin fg__on-tertiary {
  color: var(--on-tertiary);
}

@mixin fg__tertiary-container {
  color: var(--tertiary-container);
}

@mixin fg__on-tertiary-container {
  color: var(--on-tertiary-container);
}

@mixin fg__error {
  color: var(--error);
}

@mixin fg__on-error {
  color: var(--on-error);
}

@mixin fg__error-container {
  color: var(--error-container);
}

@mixin fg__on-error-container {
  color: var(--on-error-container);
}

@mixin fg__background {
  color: var(--background);
}

@mixin fg__on-background {
  color: var(--on-background);
}

@mixin fg__surface {
  color: var(--surface);
}

@mixin fg__on-surface {
  color: var(--on-surface);
}

@mixin fg__surface-variant {
  color: var(--surface-variant);
}

@mixin fg__on-surface-variant {
  color: var(--on-surface-variant);
}

@mixin fg__inverse-surface {
  color: var(--inverse-surface);
}

@mixin fg__inverse-on-surface {
  color: var(--inverse-on-surface);
}

@mixin fg__inverse-primary {
  color: var(--inverse-primary);
}

@mixin fg__primary-fixed {
  color: var(--primary-fixed);
}

@mixin fg__on-primary-fixed {
  color: var(--on-primary-fixed);
}

@mixin fg__primary-fixed-dim {
  color: var(--primary-fixed-dim);
}

@mixin fg__on-primary-fixed-variant {
  color: var(--on-primary-fixed-variant);
}

@mixin fg__secondary-fixed {
  color: var(--secondary-fixed);
}

@mixin fg__on-secondary-fixed {
  color: var(--on-secondary-fixed);
}

@mixin fg__secondary-fixed-dim {
  color: var(--secondary-fixed-dim);
}

@mixin fg__on-secondary-fixed-variant {
  color: var(--on-secondary-fixed-variant);
}

@mixin fg__tertiary-fixed {
  color: var(--tertiary-fixed);
}

@mixin fg__on-tertiary-fixed {
  color: var(--on-tertiary-fixed);
}

@mixin fg__tertiary-fixed-dim {
  color: var(--tertiary-fixed-dim);
}

@mixin fg__on-tertiary-fixed-variant {
  color: var(--on-tertiary-fixed-variant);
}

@mixin fg__surface-dim {
  color: var(--surface-dim);
}

@mixin fg__surface-bright {
  color: var(--surface-bright);
}

@mixin fg__surface-container-lowest {
  color: var(--surface-container-lowest);
}

@mixin fg__surface-container-low {
  color: var(--surface-container-low);
}

@mixin fg__surface-container {
  color: var(--surface-container);
}

@mixin fg__surface-container-high {
  color: var(--surface-container-high);
}

@mixin fg__surface-container-highest {
  color: var(--surface-container-highest);
}


@mixin bg__primary {
  background-color: var(--primary);
  color: var(--on-primary);
}

@mixin bg__primary-container {
  background-color: var(--primary-container);
  color: var(--on-primary-container);
}

@mixin bg__secondary {
  background-color: var(--secondary);
  color: var(--on-secondary);
}

@mixin bg__secondary-container {
  background-color: var(--secondary-container);
  color: var(--on-secondary-container);
}

@mixin bg__tertiary {
  background-color: var(--tertiary);
  color: var(--on-tertiary);
}

@mixin bg__tertiary-container {
  background-color: var(--tertiary-container);
  color: var(--on-tertiary-container);
}

@mixin bg__error {
  background-color: var(--error);
  color: var(--on-error);
}

@mixin bg__error-container {
  background-color: var(--error-container);
  color: var(--on-error-container);
}

@mixin bg__background {
  background-color: var(--background);
  color: var(--on-background);
}

@mixin bg__surface {
  background-color: var(--surface);
  color: var(--on-surface);
}

@mixin bg__surface-variant {
  background-color: var(--surface-variant);
  color: var(--on-surface-variant);
}

@mixin bg__inverse-surface {
  background-color: var(--inverse-on-surface);
  color: var(--inverse-surface);
}

@mixin bg__inverse-primary {
  background-color: var(--inverse-primary);
  color: var(--on-primary-container);
}

@mixin bg__primary-fixed {
  background-color: var(--primary-fixed);
  color: var(--on-primary-fixed);
}

@mixin bg__primary-fixed-dim {
  background-color: var(--primary-fixed-dim);
  color: var(--on-primary-fixed-variant);
}

@mixin bg__secondary-fixed {
  background-color: var(--secondary-fixed);
  color: var(--on-secondary-fixed);
}

@mixin bg__secondary-fixed-dim {
  background-color: var(--secondary-fixed-dim);
  color: var(--on-secondary-fixed-variant);
}

@mixin bg__tertiary-fixed {
  background-color: var(--tertiary-fixed);
  color: var(--on-tertiary-fixed);
}

@mixin bg__tertiary-fixed-dim {
  background-color: var(--tertiary-fixed-dim);
  color: var(--on-tertiary-fixed-variant);
}

@mixin bg__surface-dim {
  background-color: var(--surface-dim);
  color: var(--on-surface);
}

@mixin bg__surface-bright {
  background-color: var(--surface-bright);
  color: var(--on-surface);
}

@mixin bg__surface-container-lowest {
  background-color: var(--surface-container-lowest);
  color: var(--on-surface);
}

@mixin bg__surface-container-low {
  background-color: var(--surface-container-low);
  color: var(--on-surface);
}

@mixin bg__surface-container {
  background-color: var(--surface-container);
  color: var(--on-surface);
}

@mixin bg__surface-container-high {
  background-color: var(--surface-container-high);
  color: var(--on-surface);
}

@mixin bg__surface-container-highest {
  background-color: var(--surface-container-highest);
  color: var(--on-surface);
}
