/*
 * LiftKit is a lightweight framework for clean, minimalist designs.
 * Copyright (c) 2024 Niklas Simandi
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
@use "sass:math";

$PHI: math.div(1 + math.sqrt(5), 2) !default;

@function strip_unit($n) {
  @if type-of($n) != number {
    @error "#{$n} is not a number";
  }
  @if unitless($n) {
    @return $n;
  }
  @return math.div($n, $n * 0 + 1);
}

@function round_to($x, $num: 4) {
  @if type-of($x) != number {
    @error "#{$x} is not a number";
  }
  @if $num == 0 {
    @return round($x);
  }
  @if $num < 0 {
    @error "#{$num} is negative";
  }
  $n: 1;
  @for $_ from 1 through $num {
    $n: $n * 10;
  }
  @return math.div(round($x * $n), $n);
}

@function scale_to($n, $dim: null) {
  @if type-of($n) != number {
    @error "#{$n} is not a number";
  }
  @if not unitless($n) {
    @warn "#{$n} is not dimensionless";
    $n: strip_unit($n);
  }
  @if $dim == null {
    @return round_to(math.pow($PHI, $n));
  } @else if $dim == rem {
    @return round_to(1rem * math.pow($PHI, $n));
  } @else if $dim == em {
    @return round_to(1em * math.pow($PHI, $n));
  } @else {
    @error "#{$dim} is not a valid unit";
  }
}

$MAJOR: round_to($PHI);
$MAJOR-HALF: scale_to(0.5);
$MAJOR-QUARTER: scale_to(0.25);
$MAJOR-EIGHT: scale_to(0.125);

$MINOR: $MAJOR - 1;
$MINOR-HALF: $MAJOR-HALF - 1;
$MINOR-QUARTER: $MAJOR-QUARTER - 1;
$MINOR-EIGHT: $MAJOR-EIGHT - 1;

:root {
  --XXS: #{scale_to(-3, em)};
  --XS: #{scale_to(-2, em)};
  --S: #{scale_to(-1, em)};
  --M: #{scale_to(0, em)};
  --L: #{scale_to(1, em)};
  --XL: #{scale_to(2, em)};
  --XXL: #{scale_to(3, em)};
  --XXXL: #{scale_to(4, em)};
  --XXXXL: #{scale_to(5, em)};
}
