/*
 * LiftKit is a lightweight framework for clean, minimalist designs.
 * Copyright (c) 2024 Niklas Simandi
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
@use "sass:math";

$PHI: math.div(1 + math.sqrt(5), 2) !default;

$MAJOR: math.pow($PHI, 1.0); // ϕ^1
$MAJOR-HALF: math.pow($PHI, .5); // √ϕ
$MAJOR-QUARTER: math.pow($PHI, .25); // ϕ^1/4
$MAJOR-EIGHT: math.pow($PHI, .125); // ϕ^1/8

$MINOR: $MAJOR - 1.0; // ϕ - 1
$MINOR-HALF: $MAJOR-HALF - 1.0; // √ϕ - 1
$MINOR-QUARTER: $MAJOR-QUARTER - 1.0; // ϕ^1/4 - 1

$SIZE-2XS: 1em * math.pow($PHI, -3);
$SIZE-XS: 1em * math.pow($PHI, -2);
$SIZE-SM: 1em * math.pow($PHI, -1);
$SIZE-MD: 1em * math.pow($PHI, 0);
$SIZE-LG: 1em * math.pow($PHI, 1);
$SIZE-XL: 1em * math.pow($PHI, 2);
$SIZE-2XL: 1em * math.pow($PHI, 3);
$SIZE-3XL: 1em * math.pow($PHI, 4);

$SIZE-4XL: 1em * math.pow($PHI, 5);

@function strip_unit($n) {
  @if type-of($n) != number {
    @error "#{$n} is not a number";
  }
  @if unitless($n) {
    @return $n;
  }
  @return math.div($n, $n * 0 + 1);
}

@function round_to($x, $num: 4) {
  @if type-of($x) != number {
    @error "#{$x} is not a number";
  }
  @if $num == 0 {
    @return round($x);
  }
  @if $num < 0 {
    @error "#{$num} is negative";
  }
  $n: 1;
  @for $_ from 1 through $num {
    $n: $n * 10;
  }
  @return math.div(round($x * $n), $n);
}

@function round_to_unit($x, $dim: null, $num: 4) {
  @if type-of($x) != number {
    @error "#{$x} is not a number";
  }
  $x: strip_unit($x);
  @if $dim == null {
    @return round_to($x, $num);
  } @else if $dim == rem {
    @return round_to(1rem * $x, $num);
  } @else if $dim == em {
    @return round_to(1em * $x, $num);
  } @else {
    @error "#{$dim} is not a valid unit";
  }
}

@function scale_to($n, $dim: null) {
  @if type-of($n) != number {
    @error "#{$n} is not a number";
  }
  @if not unitless($n) {
    @warn "#{$n} is not dimensionless";
    $n: strip_unit($n);
  }
  @return round_to_unit(math.pow($PHI, $n), $dim);
}

@function render($x) {
  @return #{round_to($x)};
}
